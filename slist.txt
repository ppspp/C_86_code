#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include "assert.h"
#define ElemType int

typedef struct SListNode
{
	int data;
	struct SListNode* next;
}SListNode;

typedef struct SList
{
	SListNode *head;  //成员封装
}SList;

// 动态申请一个节点
SListNode* BuySListNode(int x)
{
	SListNode* newNode = (SListNode*)malloc(sizeof(SListNode));
	if (newNode == NULL)
	{
		printf("申请结点失败\n");
		exit(-1);
	}
	newNode->data = x;
	newNode->next = NULL;
	return newNode;
}
void SListInit(SList *plist)
{
	plist->head = NULL;
}

// 单链表打印
void SListPrint(SList* plist)
{
	SListNode* cur = plist->head;
	while (cur != NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}

// 单链表尾插
void SListPushBack(SList* pplist, int x)
{
	assert(pplist);
	SListNode* newNode = BuySListNode(x);
	newNode->data = x;
	SListNode *p = pplist->head;
	if (p == NULL)
		pplist->head = newNode;
	else
	{
		while (p->next != NULL)
			p = p->next;
		p->next = newNode;
	}
}

// 单链表的头插
void SListPushFront(SList* pplist, int x)
{
	assert(pplist);
	SListNode* newNode = BuySListNode(x);
	newNode->data = x;
	newNode->next = pplist->head;
	pplist->head = newNode;
}
// 单链表的尾删
void SListPopBack(SList* pplist)
{
	assert(pplist);
	SListNode *p = pplist->head;
	if (p != NULL) 
	{
		if (p->next == NULL) 
			pplist->head = NULL;
		else
		{
			SListNode *pre = NULL;
			while (p->next != NULL)
			{
				pre = p;
				p = p->next;
			}
			pre->next = NULL;
		}
		free(p);
	}
}
// 单链表头删
void SListPopFront(SList* pplist)
{
	assert(pplist);
	SListNode *p = pplist->head;
	if (p != NULL)
	{
		if (p->next == NULL)
			pplist->head = NULL;
	    else{
			pplist->head = p->next;
			free(p);
	       }
	}
}
// 单链表查找
SListNode* SListFind(SList* plist, int x);
// 单链表在pos位置之后插入x
void SListInsertAfter(SList* pos, int x);
// 单链表删除pos位置之后的值
void SListEraseAfter(SList* pos);
// 单链表的销毁
void SListDestory(SList* plist);